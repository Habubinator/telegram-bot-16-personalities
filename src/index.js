const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
require("dotenv").config();

const db = new Map();
const gSController = require("./googleSheetsController");
const logger = require("./logger");

const bot = new TelegramBot(process.env.BOT_TOKEN, {
    polling: {
        interval: process.env.BOT_POLLING_INTERVAL || 300,
    },
});

function convertToArrays(options, questionId) {
    const result = [
        [
            {
                text: "‚¨Ö",
                callback_data: `back`,
            },
        ],
    ];

    options.forEach((option) => {
        result.push([
            {
                text: option.text,
                callback_data: `answer ${questionId} ${option.value}`,
            },
        ]);
    });

    return result;
}

db.set(
    "greeting_ua",
    "–í—ñ—Ç–∞—é, –º–µ–Ω–µ –∑–≤—É—Ç—å –ê–Ω–∞—Ç–æ–ª—ñ–π –ú–∞–Ω–æ–ª—ñ–π, —è —Ä–∞–¥–∏–π –±–∞—á–∏—Ç–∏ —Ç–≤–æ—é –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å –¥–æ –≥—Ä–∏," +
        " –∞–ª–µ –ø–µ—Ä–µ–¥ –Ω–µ—é –±—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä–∏ –º–æ–≤—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç (7—Ö–≤.) —ñ —â–æ–± –ø–æ—á–∞—Ç–∏, —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá"
);
db.set(
    "greeting_en",
    "Hello, my name is Anatoli Manolii, I'm glad to see your interest to the game," +
        " but before we start, please take the test (7 min.) and click the button below üëá to start."
);
db.set(
    "greeting_ru",
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–∞—Ç–æ–ª–∏–π –ú–∞–Ω–æ–ª–∏–π, —è —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–≤–æ—é –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫ –∏–≥—Ä–µ, " +
        "–Ω–æ –ø–µ—Ä–µ–¥ –Ω–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç (7–º–∏–Ω.) –∏ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá"
);

var keyboards = {
    main_menu: {
        ua: {
            inline_keyboard: [
                [
                    {
                        text: "–†–æ–∑–ø–æ—á–∞—Ç–∏",
                        callback_data: "start ua",
                    },
                ],
                [
                    {
                        text: "English",
                        callback_data: "switch en",
                    },
                ],
                [
                    {
                        text: "–†—É—Å—Å–∫–∏–π",
                        callback_data: "switch ru",
                    },
                ],
            ],
        },
        en: {
            inline_keyboard: [
                [
                    {
                        text: "Start",
                        callback_data: "start en",
                    },
                ],
                [
                    {
                        text: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
                        callback_data: "switch ua",
                    },
                ],
                [
                    {
                        text: "–†—É—Å—Å–∫–∏–π",
                        callback_data: "switch ru",
                    },
                ],
            ],
        },
        ru: {
            inline_keyboard: [
                [
                    {
                        text: "–ù–∞—á–∞—Ç—å",
                        callback_data: "start ru",
                    },
                ],
                [
                    {
                        text: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
                        callback_data: "switch ua",
                    },
                ],
                [
                    {
                        text: "English",
                        callback_data: "switch en",
                    },
                ],
            ],
        },
    },
    answer: {
        ua: {},
        en: {},
        ru: {},
    },
};

const languages = {
    en: "en",
    ua: "ua",
    ru: "ru",
};

let questions = {
    ua: null,
    en: null,
    ru: null,
};

bot.setMyCommands([{ command: "/start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç" }]);

bot.onText(/\/start/, async (msg) => {
    try {
        console.log(msg);
        const chatId = msg.chat.id;
        db.set(chatId, {
            language: languages[msg.from.language_code] || "en",
            progress: 0,
            maxQuestions: 0,
            answers: new Map(),
            from: msg.from,
            chat: msg.chat,
        });

        bot.sendPhoto(chatId, `${__dirname}/img/wide.jpg`, {
            reply_markup: keyboards.main_menu[db.get(chatId).language],
            caption: db.get(`greeting_${db.get(chatId).language}`),
        });
    } catch (error) {
        logger.logError(error, msg);
    }
});

// Handle callback queries
bot.on("callback_query", async function onCallbackQuery(callbackQuery) {
    try {
        const action = callbackQuery.data;
        const msg = callbackQuery.message;
        const action_detail = action.split(" ");
        let user;
        let userProgress;
        let maxUserQuestions;
        let tempQuest;
        switch (action_detail[0]) {
            case "switch":
                bot.editMessageCaption(db.get(`greeting_${action_detail[1]}`), {
                    chat_id: msg.chat.id,
                    message_id: msg.message_id,
                    reply_markup: keyboards.main_menu[`${action_detail[1]}`],
                });
                break;
            case "start":
                questions.en = (
                    await axios.get(
                        "https://www.16personalities-api.com/api/personality/questions"
                    )
                ).data;
                db.get(msg.chat.id).maxQuestions = questions.en.length;
                bot.deleteMessage(msg.chat.id, msg.message_id);
                switch (action_detail[1]) {
                    case "en":
                        user = db.get(msg.chat.id);
                        userProgress = user.progress;
                        maxUserQuestions = user.maxQuestions;
                        tempQuest = questions.en[userProgress];
                        user.answers.set(userProgress, {
                            id: tempQuest.id,
                        });
                        bot.sendMessage(
                            msg.chat.id,
                            `Question ${
                                userProgress + 1
                            }/${maxUserQuestions} \n${tempQuest.text}`,
                            {
                                reply_markup: {
                                    inline_keyboard: convertToArrays(
                                        tempQuest.options,
                                        userProgress
                                    ),
                                },
                            }
                        );
                        break;
                    case "ru":
                        bot.sendMessage(
                            msg.chat.id,
                            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞-—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ English –≤–µ—Ä—Å–∏—é"
                        );
                        break;
                    case "ua":
                        bot.sendMessage(
                            msg.chat.id,
                            "–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π, —Å–ø—Ä–æ–±—É–π—Ç–µ English –≤–µ—Ä—Å—ñ—é"
                        );
                        break;
                }
                break;
            case "answer":
                console.log(action);
                user = db.get(msg.chat.id);
                user.answers.set(+action_detail[1], {
                    ...db.get(msg.chat.id).answers.get(+action_detail[1]),
                    value: +action_detail[2],
                });
                userProgress = ++db.get(msg.chat.id).progress;
                maxUserQuestions = db.get(msg.chat.id).maxQuestions;
                if (userProgress == maxUserQuestions) {
                    console.log("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                } else {
                    tempQuest = questions.en[userProgress];
                    user.answers.set(userProgress, {
                        id: tempQuest.id,
                    });
                    bot.editMessageText(
                        `Question ${userProgress + 1}/${maxUserQuestions} \n${
                            tempQuest.text
                        }`,
                        {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: convertToArrays(
                                    tempQuest.options,
                                    userProgress
                                ),
                            },
                        }
                    );
                }
                break;
            case "back":
                user = db.get(msg.chat.id);
                userProgress = --user.progress;
                if (userProgress < 0) {
                    // TODO - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥—ã
                    return bot.sendMessage(
                        msg.chat.id,
                        "You are already on first question"
                    );
                } else {
                    maxUserQuestions = db.get(msg.chat.id).maxQuestions;
                    tempQuest = questions.en[userProgress];
                    bot.editMessageText(
                        `Question ${userProgress + 1}/${maxUserQuestions} \n${
                            tempQuest.text
                        }`,
                        {
                            chat_id: msg.chat.id,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: convertToArrays(
                                    tempQuest.options,
                                    userProgress
                                ),
                            },
                        }
                    );
                }
                break;
        }
    } catch (error) {
        logger.logError(error);
    }
});

bot.on("polling_error", (error) => {
    if (Math.floor(process.uptime()) <= 60) {
        process.exit(0);
    }
});
